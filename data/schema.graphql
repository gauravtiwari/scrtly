schema {
  query: Query
}

type Comment implements Node {
  id: ID!
  body: String
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  body: String
  comments: [Comment]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

type PostEdge {
  node: Post
  cursor: String!
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
}

type Viewer implements Node {
  id: ID!
  posts(after: String, first: Int, before: String, last: Int): PostConnection
  words(query: String): [Word]
}

type Word implements Node {
  id: ID!
  name: String
}
